$(function () {

    /* Summernote Validation */

    var form = $('#myform');
    var summernoteElement = $('.summernote');
    var summernoteElements = $('.summernotes');

    $.validator.addMethod("dateAfter",
        function (value, element, params) {
            if ($(params).val() != "") {
                if (!/Invalid|NaN/.test(new Date(value))) {
                    return new Date(value) > new Date($(params).val());
                }

                return isNaN(value) && isNaN($(params).val())
                    || (Number(value) > Number($(params).val()));
            }
            else {
                return true;
            }
        }, 'The end date must be later than start date.');

    $.validator.addMethod("dateBefore",
        function (value, element, params) {
            if ($(params).val() != "") {
                if (!/Invalid|NaN/.test(new Date(value))) {
                    return new Date(value) < new Date($(params).val());
                }
                return isNaN(value) && isNaN($(params).val())
                    || (Number(value) < Number($(params).val()));
            }
            else {
                return true;
            }
        }, 'The start date must be earlier than end date.');

    var validate = form.validate({
        errorElement: "div",
        ignore: false,
        errorPlacement: function (error, element) {
            error.addClass("invalid-feedback");

            if (element.hasClass("input-file-upload")) {
                $('#' + element.attr("id") + '_error').text(error.text());
            }
            else if (element.hasClass("datetimepicker-input")) {
                $('#' + element.attr("id") + '_error').text(error.text());
            }
            else if (element.hasClass("summernote")) {
                error.insertAfter(element.siblings(".note-editor"));
            }
            else {
                error.insertAfter(element);
            }
        },
        rules: {
            startDate: {
                dateBefore: '#endDate'
            },
            endDate: {
                dateAfter: '#startDate'
            }
        },
        success: function (error) {
            error.remove();
        },
        submitHandler: function (e) {
            //e.preventDefault();
            $('#save-btn').attr("disabled", 'disabled');
            //console.log("form submit!")
            submitData();
            //form.submit();
        }
    });

    var AddImage = function (context) {
        var ui = $.summernote.ui;
        var button = ui.button({
            className: 'note-btn-bold',
            contents: '<i class="note-icon-picture"/> Add Image',
            container: false,
            tooltip: 'Select Image',
            click: function () {
                $("#insertImg").modal('show');
            }
        });
        return button.render();   // return button as jquery object
    };


    summernoteElement.summernote({
        height: 500,
        popover: {
            image: [],
            link: [],
            air: []
        },
        toolbar: [
            ['mybutton', ['addImg']],
            ['style', ['style']],
            ['font', ['bold', 'underline', 'clear']],
            ['fontsize', ['fontsize']],
            ['fontname', ['fontname']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['table', ['table']],
            ['insert', ['link', 'hr']],
            ['view', ['fullscreen', 'help', 'undo', 'redo']],
            ['height', ['height']]
        ],
        buttons: {
            addImg: AddImage
        },
        callbacks: {
            onChange: function (contents, $editable) {
                // Note that at this point, the value of the `textarea` is not the same as the one
                // you entered into the summernote editor, so you have to set it yourself to make
                // the validation consistent and in sync with the value.
                summernoteElement.val(summernoteElement.summernote('isEmpty') ? "" : contents);

                // You should re-validate your element after change, because the plugin will have
                // no way to know that the value of your `textarea` has been changed if the change
                // was done programmatically.
                validate.element(summernoteElement);
            }
        }
    });

    summernoteElements.summernote({
        height: 300,
        popover: {
            image: [],
            link: [],
            air: []
        },
        callbacks: {
            onChange: function (contents, $editable) {
                summernoteElements.val(summernoteElements.summernote('isEmpty') ? "" : contents);
                validate.element(summernoteElements);
            }
        }
    });

    $(".modal-header .close").html("X");
});

$("#btn-save-modal").click(function () {
    var bg = $("#pictureModal").text();
    var img = {
        "Base64Image": bg
    }

    $.ajax({
        url: apiWeb + 'api/Media',
        method: 'post',
        data: JSON.stringify(img),
        contentType: 'application/json; charset=utf-8',
        headers: {
            Authorization: "Bearer " + token,
        },
        beforeSend: function (data) {
            $("#btn-save-modal").html("Loading...").attr('disabled', true);
        },
        success: function (data) {
            $("#insertImg").modal('hide');
            $("#btn-save-modal").html("Add");
            var $summernote = $(".summernote").eq(0);
            $summernote.summernote("insertImage", data.detail);
            clearModal();
        }
    });
});

function clearModal() {
    $('#preview-upload-modal').addClass('d-none').css('background-image', 'url("")');
    $('.file-name-modal').html("");
    $('#thumbnailmodal').val("");
    $('#pictureModal').html("");
    $('#btn-save-modal').attr('disabled', true);
}

$(".modal-header .close").click(function () {
    clearModal();
});